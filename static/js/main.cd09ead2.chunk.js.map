{"version":3,"sources":["services/api.js","pages/main/index.js","pages/product/index.js","routes.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","Main","state","products","productInfo","page","loadProducts","a","get","response","data","docs","setState","console","log","nextPage","pages","pageNumber","prevPage","this","className","map","product","key","_id","title","description","to","disabled","onClick","Component","Product","id","props","match","params","href","url","Routes","exact","path","component","Header","Footer","target","Icon","color","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd09ead2.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst urlApi = \"http://rocketseat-node.herokuapp.com/api\";\n\nconst api = axios.create({baseURL : urlApi});\n\n\nexport default api;","import React, { Component } from 'react'\nimport api from '../../services/api'\nimport {Link} from 'react-router-dom'\n\nimport './styles.css'\nexport default class Main extends Component{\n    state = {\n        products: [],\n        productInfo: {},\n        page: 1,\n    }\n\n    //Executado assim que o componente é montado em tela\n    componentDidMount(){\n        this.loadProducts();\n    }\n\n\n    loadProducts = async (page = 1) => {\n        const response = await api.get(`/products/?page=${page}`)\n        //console.log(response.data.docs);\n        \n        const {docs , ...productInfo} = response.data;\n        \n        this.setState({products: docs , productInfo , page})\n\n        console.log(`Products info ${productInfo}`)\n    }\n\n    nextPage = () => {\n        const {page , productInfo} = this.state;\n\n        //Verificar se a página atual é a última\n        if(page === productInfo.pages) return;\n\n        const pageNumber = page+1;\n\n        this.loadProducts(pageNumber)\n\n    }\n\n    prevPage = () => {\n        const {page, productInfo} = this.state;\n\n        if(page === 1) return;\n\n        const pageNumber = page - 1;\n\n        this.loadProducts(pageNumber);\n\n    }\n\n    render(){\n        const {products, page , productInfo} = this.state;\n    return(\n        <div className=\"product-list\">\n            {products.map(product => (\n                // As keys ajudam o React a identificar quais itens sofreram alterações, foram adicionados ou removidos.\n                <article key={product._id}>\n                    <strong>{product.title}</strong>\n                    <p>{product.description}</p>\n                    <Link to={`/products/${product._id}`}>Acessar</Link>\n                </article>\n                \n            ))}\n            <div className='actions'>\n                <button disabled={page === 1} onClick={this.prevPage}>Anterior</button>\n                <button disabled={page === productInfo.pages} onClick={this.nextPage}>Próximo</button>\n            </div>\n        </div>\n        )\n    }\n}","import React from 'react'\nimport { Component } from 'react';\nimport api from '../../services/api';\nimport {Link} from 'react-router-dom'\n\nimport './styles.css'\n\n\nexport default class Product extends Component{\n    state = {\n        product : {},\n    };\n\n    async componentDidMount(){\n        const {id} = this.props.match.params;\n        const response = await api.get(`/products/${id}`)\n\n        this.setState({product: response.data})\n    }\n\n    render(){\n        const {product} = this.state;\n        return (\n            <div className=\"container\">\n                 <div className=\"product-info\">\n                    <h1>{product.title}</h1>\n                    <p>{product.description}</p>\n                    <p>\n                        URL: <a href={product.url}>{product.url}</a>\n                    </p>\n                </div>\n               <div className=\"actions\">\n                    <button><Link to='/'>Voltar</Link></button>\n               </div>\n            </div>\n        )\n    }\n}","import React from 'react'\n\nimport {BrowserRouter , Switch , Route} from 'react-router-dom'\n\nimport Main from './pages/main';\nimport Product from './pages/product';\n\nconst Routes = ()=>(\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={Main}/>\n            <Route path=\"/products/:id\" component={Product} />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Routes;","import React from 'react';\n\nimport './styles.css'\n\n//Stateless component\nconst Header = () => (\n    <header className=\"main-header\">JSHunt</header>\n);\n\nexport default Header;","import React from 'react'\n\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport { Icon } from '@material-ui/core';\n\nimport './styles.css'\n\n\nconst Footer = () => (\n    <footer className=\"main-footer\">\n        <p>Gabi Hoffmann</p>\n        <a href=\"https://github.com/gabihoffmann\" target=\"_blank\">\n            <Icon color=\"secondary\"><GitHubIcon /></Icon>\n        </a>\n        <a href=\"https://www.linkedin.com/in/agfhoffmann/\" target=\"_blank\">\n            <Icon color=\"primary\">\n                <LinkedInIcon/>\n            </Icon>\n        </a>\n    </footer>\n);\n\nexport default Footer;","import React from 'react';\nimport Routes from './routes';\n//Style\nimport './styles.css'\n//Components\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header/>\n    <Routes/>\n    <Footer/>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}